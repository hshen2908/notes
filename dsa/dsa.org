#+TITLE: Data Structures and Algorithms
#+DESCRIPTION: Theory, description, and implementation of a collection of data structures and algorithms.
#+PROPERTY:
#+AUTHOR: Henrique Shen
#+EMAIL: hshen2908@gmail.com


* TABLE OF CONTENTS :toc:
- [[#proof_techniques][PROOF_TECHNIQUES]]
  - [[#loop_invariant][LOOP_INVARIANT]]
- [[#sorting][SORTING]]
  - [[#insertion_sort][INSERTION_SORT]]

* PROOF_TECHNIQUES
** LOOP_INVARIANT
*** DESCRIPTION
A loop-invariant proof is a form of mathematical induction, where to prove that a property holds, you prove a base case and an inductive step. Showing that the invariant holds before the first iteration corresponds to the base case, and showing that the invariant holds from iteration to iteration corresponds to the inductive step. We use the loop invariant along with the condition that caused the loop to terminate to show correctness. While mathematical induction typically applies the inductive step infinitely, in a loop invariant the "induction" stops when the loop terminates.

*** FORMAT
*Initialization:* Show that it is true prior to the first iteration of the loop. When the loop is a for loop, the loop-invariant check occurs immediately after the initial assignment to the loop-counter variable and just before the first test in the loop header.

*Maintenance:* Assume that the invariant is true before an iteration of the loop. Show that it remains true before the next iteration.

*Termination:* The loop terminates, and when it terminates, the invariant - usually along with the reason the loop terminated - gives us a useful property that helps show that the algorithm is correct.


* SORTING
*THE SORTING PROBLEM*
*Input:* A sequence of numbers n <a_1, a_2, ..., a_n>.
*Output:* A permutation <a_1', a_2', ..., a_n'> of the input sequence such that a_1'<=a_2'<=...<=a_n'.

** INSERTION_SORT
*** DESCRIPTION
An efficient algorithm for sorting a small number of elements.
Given an array A, at each iteration of the for loop, which is indexed by i, the subarray (a contiguous portion of the array) consisting of elements A[1:i-1] (thath is, A[1] through A[i-1]) constitutes the currently sorted section of A, and the remaining subarray A[i+1:n] corresponds to the section of A that is yet to be sorted.

*** ALGORITHM
#+BEGIN_EXAMPLE
A: array containing the values to be sorted
n: number of vallues to sort

INSERTION-SORT(A,n)
    for i = 2 to n
        key = A[i]
        // Insert A[i] into the sorted subarray A[1:i-1]
        j = i-1
        while j > 0 and A[j] > key
            A[j+1] = A[j]
            j = j - 1
        A[j] = key
#+END_EXAMPLE

*** IMPLEMENTATION
**** C file:./C/Sorting/InsertionSort.h
#+begin_src C :exports code :mkdirp yes :tangle ./C/Sorting/InsertionSort.h
#include <stdlib.h>
#include <stdio.h>
#include <stddef.h>

void InsertionSort(void* A, size_t n, size_t size, int (*cmp)(const void*, const void*)) {
    for (size_t i = 1; i < n; i++) {
        char* keybuf = (char*) malloc(size);
        memcpy(keybuf, ((void*)A)+i*size, size);
        ptrdiff_t j = i - 1;
        while (j >= 0 && cmp(((void*)A)+j*size, keybuf)) {
            memcpy(((void*)A)+(j+1)*size, ((void*)A)+j*size, size);
            j--;
        }
        memcpy(((void*)A)+j*size, keybuf, size);
    }
}

void InsertionSort(void** A, size_t n, int (*cmp)(const void*, const void*)) {
    for (size_t i = 1; i < n; i++) {
        void* key = A[i];
        // Insert A[i] into the sorted subarray A[0:i-1]
        ptrdiff_t  j = i - 1;
        while (j >= 0 && cmp(A[j], key)) {
            A[j+1] = A[j];
            j--;
        }
        A[j] = key;
    }
}
#+end_src

**** C++ file:./Cpp/Sorting/InsertionSort.h
#+begin_src C++ :exports code :mkdirp yes :tangle ./Cpp/Sorting/InsertionSort.h
#ifndef INSERTION_SORT_H
#define INSERTION_SORT_H
#include <cstddef>
#include <vector>

template<typename T>
void InsertionSort(std::vector<T> &A) {
    for (std::size_t i = 1; i < A.size(); i++) {
        T key = A[i];
        // Insert A[i] into the sorted subarray A[0:i-1]
        ptrdiff_t j = i - 1;
        while (j >= 0 && A[j] > key) {
            A[j+1] = A[j];
            j--;
        }
        A[j] = key;
    }
}

#endif
#+end_src

*** CORRECTNESS
[[LOOP_INVARIANT][Loop Invariant]]:At the start of each iteration of the for loop, the subarray A[1:i-1] consists of the elements originally in A[1:i-1], but in sorted order.

*Initialization:* We start by showing that the loop invariant holds before the first loop iteration, when i = 2. The subarray A[1:i-1] consists of just the single elements A[1], which is in fact the original element in A[1]. Moreover, the subarray is sorted, which shows that the loop invariant holds prior to the first iteration of the loop.

*Maintenance:* Next, we tackle the second property: showing that each iteration maintains the loop invariant. Informally, the body of the for loop works by moving the values in A[i-1], A[i-2], A[i-3], and so on by one position to the right until it finds the proper position for A[i], at which point it inserts the value of A[i]. The subarray A[1:i] then consists of the elements originally in A[1:i], but in sorted order. Incrementing i (increasing its value by 1) for the next iteration of the for loop then preserves the loop invariant. A loop invariant for the while loop would be required for a formal treatment of this property.

*Termination:* The loop variable i starts at 2 and increments by 1 in each iteration. Once i exceeds n, the loop terminates. That is, the loop terminates once i equals n-1. Substituting n+1 for the i in the wording of the loop invariant yields that the subarray A[1:n] consists of the elements originally in A[1:n], but in sorted order. Hence, the algorithm is correct.

*** Analysis
